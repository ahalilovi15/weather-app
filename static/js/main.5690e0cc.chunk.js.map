{"version":3,"sources":["logo.svg","components/forecast.jsx","components/weather_component.jsx","components/form_component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Forecast","props","icon","weatherIcons","className","day","temp_min","temp_max","minmaxTemp","min","max","calCelsius","temp","Math","floor","Weather","console","log","forecast","city","country","temp_celsius","description","class","map","weather","dayName","Date","dt_txt","replace","getDay","icon_id","Form","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","API_key","mapDataToWeatherInterface","data","mapped","location","condition","cod","sys","date","dt","feels_like","round","main","humidity","id","sunrise","sunset","temperature","timezone","wind_speed","wind","speed","Object","entries","key","undefined","App","getWeather","e","a","preventDefault","target","elements","value","fetch","api_call","json","response","setState","celsius","getWeatherIcon","weatherIcon","api_call_forecast","response_forecast","list","filter","f","match","state","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","then","responseJson","icons","rangeId","this","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5690e0cc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\nimport * as weatherIcons from '../icons';\r\nimport './forecast_style.css';\r\nconst Forecast=(props)=>{\r\n    const icon = 'wi wi-'+\r\n          weatherIcons.default['day'][props.icon].icon;\r\n    return(\r\n        <div className='forecast-weather'>\r\n            <h5>{props.day}</h5>\r\n            \r\n            <h5 className='py-4'> \r\n            <i className={icon}></i>\r\n            </h5> \r\n            <h5>\r\n           <span className='px-2'>{props.temp_min}&deg;</span>\r\n           <span className='px-2'>{props.temp_max}&deg;</span>\r\n       </h5> \r\n        </div>\r\n    );\r\n};\r\nexport default Forecast;","import React from 'react';\r\nimport './weather_style.css';\r\nimport Forecast from './forecast.jsx'\r\nconst Weather=(props)=>{\r\n    console.log(props.forecast);\r\n    console.log(props);\r\n    return(\r\n        <div className=\"container\">\r\n            <div className='today'>\r\n            <div className='cards pt-4'>\r\n                <h1>{props.city}{props.country}</h1>\r\n                \r\n                {props.temp_celsius ?\r\n                (<h1 className='py-2'>{props.temp_celsius}&deg;</h1>) : null}\r\n                {minmaxTemp(props.temp_min,props.temp_max)}\r\n                <h4 className='py-3'>{props.description}</h4>\r\n                </div>\r\n                    <div className='icon'>\r\n                    <h5 className='py-4'> \r\n                <i className={`wi ${props.icon} display-1`}></i>\r\n                </h5> \r\n                    </div>\r\n                    </div>\r\n                <div class=\"flex-forecast\">\r\n                {\r\n\r\n                 props.forecast.map((weather)=>{\r\n                     console.log(weather);\r\n                     var days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n                     var d = new Date(weather.dt_txt.replace(\" \", \"T\"));\r\n                     var dayName = days[d.getDay()];\r\n                     \r\n                     return <Forecast\r\n                     day={dayName}\r\n                     temp_max={calCelsius(weather.max)}\r\n                     temp_min={calCelsius(weather.min)}\r\n                     icon={weather.icon_id}\r\n                     />\r\n                   \r\n                })\r\n                }\r\n             </div>\r\n            \r\n        </div>\r\n    );\r\n};\r\nfunction minmaxTemp(min,max){\r\n    if(min && max){\r\n    return (\r\n       <h3>\r\n           <span className='px-4'>{min}&deg;</span>\r\n           <span className='px-4'>{max}&deg;</span>\r\n       </h3> \r\n    );\r\n    }\r\n}\r\nfunction calCelsius(temp){\r\n    let cel = Math.floor(temp - 273.15);\r\n    return cel;\r\n  }\r\nexport default Weather;","import React from 'react';\r\nimport './form_style.css';\r\n\r\nconst Form = props =>{\r\n    return(\r\n        <div className=\"container h-100\">\r\n            <div>{props.error ? error(): null}</div>\r\n            <form onSubmit={props.loadweather}>\r\n            <div className=\"row\">\r\n                <div className=\"col-md-3 offset-md-2\">\r\n                    <input type=\"text\" className=\"form-control\" name=\"city\" autoComplete=\"off\" placeholder=\"City\"></input>\r\n                </div>\r\n                <div className=\"col-md-3\">\r\n                <input type=\"text\" className=\"form-control\" name=\"country\" autoComplete=\"off\" placeholder=\"Country\"></input>\r\n                </div>\r\n                <div className=\"col-md-3 mt-md-0 mt-2 text-md-left\">\r\n                    <button className=\"btn btn-warning\">Get Weather</button>\r\n                </div>\r\n            </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction error(){\r\n    return (\r\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n            Please Enter City and Country\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Form;","import logo from './logo.svg';\nimport React from 'react'\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'weather-icons/css/weather-icons.css';\nimport Weather from './components/weather_component'\nimport Forecast from './components/forecast'\nimport Form from './components/form_component'\nimport { Component } from 'react';\nconst API_key='7c24c471fd78c7f4212f2d805f6715e8';\nconst API_key2 ='76de9c385163459b9dc123428210406';\n\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon : undefined,\n      main : undefined,\n      celsius : undefined,\n      temp_max : undefined,\n      temp_min : undefined,\n      description : \"\",\n      error : false,\n      forecast : undefined,\n    };\n    this.weatherIcon = {\n      Thunderstorm : \"wi-thunderstorm\",\n      Drizzle : \"wi-sleet\",\n      Rain : \"wi-storm-showers\",\n      Snow : \"wi-snow\",\n      Atmosphere : \"wi-fog\",\n      Clear : \"wi-day-sunny\",\n      Clouds : \"wi-day-fog\"\n    }\n    \n  }\n\n  componentWillMount(){\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=sarajevo,ba&appid=${API_key}`)\n      .then((response)=>response.json())\n      .then((responseJson)=>{\n        this.setState({\n          city : `${responseJson.name}, ${responseJson.sys.country}`,\n          celsius : this.calCelsius(responseJson.main.temp),\n          temp_max : this.calCelsius(responseJson.main.temp_max),\n          temp_min : this.calCelsius(responseJson.main.temp_min),\n          description : responseJson.weather[0].description,\n          error : false\n        });\n        this.getWeatherIcon(this.weatherIcon, responseJson.weather[0].id);\n      });\n    fetch(`http://api.openweathermap.org/data/2.5/forecast/?q=sarajevo&appid=${API_key}`)\n      .then((response)=>response.json())\n      .then((responseJson)=>{\n        \n        this.setState({\n          forecast : responseJson.list\n          .filter((f) => f.dt_txt.match(/09:00:00/))\n          .map(mapDataToWeatherInterface)\n        });\n        \n      })\n     \n    \n    \n  }\n  calCelsius(temp){\n    let cel = Math.floor(temp - 273.15);\n    return cel;\n  }\n  mapDataToWeatherInterface (data){\n    const mapped = {\n      location: data.name,\n      condition: data.cod,\n      country: data.sys.country,\n      date: data.dt * 1000, // convert from seconds to milliseconds\n      description: data.weather[0].description,\n      feels_like: Math.round(data.main.feels_like),\n      humidity: data.main.humidity,\n      icon_id: data.weather[0].id,\n      sunrise: data.sys.sunrise * 1000, // convert from seconds to milliseconds\n      sunset: data.sys.sunset * 1000, // convert from seconds to milliseconds\n      temperature: Math.round(data.main.temp),\n      timezone: data.timezone / 3600, // convert from seconds to hours\n      wind_speed: Math.round(data.wind.speed * 3.6), // convert from m/s to km/h\n    }\n  \n    // Add extra properties for the five day forecast: dt_txt, icon, min, max\n    if (data.dt_txt) {\n      mapped.dt_txt = data.dt_txt;\n    }\n  \n    if (data.weather[0].icon) {\n      mapped.icon = data.weather[0].icon;\n    }\n  \n    if (data.main.temp_min && data.main.temp_max) {\n      mapped.max = Math.round(data.main.temp_max);\n      mapped.min = Math.round(data.main.temp_min);\n    }\n  \n    // remove undefined fields\n    Object.entries(mapped).map(\n      ([key, value]) => value === undefined && delete mapped[key],\n    );\n   \n    return mapped;\n  }\n  getWeatherIcon(icons, rangeId){\n    switch(true){\n      case rangeId >= 200 && rangeId <= 232:\n        this.setState({icon: this.weatherIcon.Thunderstorm})\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({icon: this.weatherIcon.Drizzle})\n        break;\n      case rangeId >= 500 && rangeId <= 531:\n        this.setState({icon: this.weatherIcon.Rain})\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({icon: this.weatherIcon.Snow})\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({icon: this.weatherIcon.Atmosphere})\n        break;\n      case rangeId === 800:\n        this.setState({icon: this.weatherIcon.Clear})\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({icon: this.weatherIcon.Clouds})\n        break;\n      default:\n        this.setState({icon: this.weatherIcon.Clouds})\n      }\n  }\n\n  getWeather = async (e)=>{\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    if(city && country) {\n    const api_call = await fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`\n      );\n    const response = await api_call.json();\n    \n    this.setState({\n      city : `${response.name}, ${response.sys.country}`,\n      celsius : this.calCelsius(response.main.temp),\n      temp_max : this.calCelsius(response.main.temp_max),\n      temp_min : this.calCelsius(response.main.temp_min),\n      description : response.weather[0].description,\n      error : false\n    });\n    this.getWeatherIcon(this.weatherIcon, response.weather[0].id);\n  } else{\n      this.setState({error: true});\n  }\n\n  \n    const api_call_forecast = await fetch(\n      `http://api.openweathermap.org/data/2.5/forecast/?q=${city}&appid=${API_key}`\n    );\n    const response_forecast = await api_call_forecast.json();\n    \n    this.setState({\n      forecast : response_forecast.list\n      .filter((f) => f.dt_txt.match(/09:00:00/))\n      .map(mapDataToWeatherInterface)\n    });\n  };\n \n\n  render(){\n   \n    \n    return(\n      \n      <div className=\"App\">\n      \n      <Form loadweather={this.getWeather} error={this.state.error}></Form>\n      { this.state.forecast!=undefined &&\n      <Weather className=\"card\"\n      city={this.state.city}\n      country={this.state.country}\n      temp_celsius={this.state.celsius}\n      temp_max={this.state.temp_max}\n      temp_min={this.state.temp_min}\n      description={this.state.description}\n      icon={this.state.icon}\n      forecast={this.state.forecast}\n      />\n  }\n     \n    \n    </div>\n  \n     );\n  }\n}\n\n\n\nfunction mapDataToWeatherInterface(data) {\n  const mapped = {\n    location: data.name,\n    condition: data.cod,\n    country: data.sys.country,\n    date: data.dt * 1000, // convert from seconds to milliseconds\n    description: data.weather[0].description,\n    feels_like: Math.round(data.main.feels_like),\n    humidity: data.main.humidity,\n    icon_id: data.weather[0].id,\n    sunrise: data.sys.sunrise * 1000, // convert from seconds to milliseconds\n    sunset: data.sys.sunset * 1000, // convert from seconds to milliseconds\n    temperature: Math.round(data.main.temp),\n    timezone: data.timezone / 3600, // convert from seconds to hours\n    wind_speed: Math.round(data.wind.speed * 3.6), // convert from m/s to km/h\n  };\n\n  // Add extra properties for the five day forecast: dt_txt, icon, min, max\n  if (data.dt_txt) {\n    mapped.dt_txt = data.dt_txt;\n  }\n\n  if (data.weather[0].icon) {\n    mapped.icon = data.weather[0].icon;\n  }\n\n  if (data.main.temp_min && data.main.temp_max) {\n    mapped.max = Math.round(data.main.temp_max);\n    mapped.min = Math.round(data.main.temp_min);\n  }\n\n  // remove undefined fields\n  Object.entries(mapped).map(\n    ([key, value]) => value === undefined && delete mapped[key],\n  );\n  \n  return mapped;\n}\nfunction calCelsius(temp){\n  let cel = Math.floor(temp - 273.15);\n  return cel;\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}